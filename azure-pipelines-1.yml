trigger:
 - main
pool:
  name:  'myvmsspool'

parameters:
- name: file
  displayName: files list
  type: object
  default:
    - file1.txt
    - file2.txt 
    - file3.txt 
  
jobs:
- job: test 
  displayName: 'Build Files in Parallel'
  steps:
  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
            $pwsh_cmd = "${env:ProgramFiles}\PowerShell\7\pwsh.exe"
            try {
              $null = Get-Command pwsh
            }
            catch {
              Write-Output "Finding latest PowerShell version"
              $latest_powershell = Invoke-RestMethod -Method Get -Uri https://api.github.com/repos/PowerShell/PowerShell/releases/latest
              $tag = $latest_powershell.tag_name
              $download_url = ($latest_powershell.assets | Where-Object {$_.name -Match "^.*win.*64.*\.msi$" }).browser_download_url

              Write-Output "Downloading PowerShell $tag"
              $out_file = "PowerShell-$tag-win-x64.msi"
              Invoke-WebRequest -Uri $download_url -OutFile $out_file

              Write-Host -NoNewline "Installing PowerShell ${tag}..."
              msiexec.exe /package $out_file /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ADD_FILE_CONTEXT_MENU_RUNPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1 USE_MU=1 ENABLE_MU=1 ADD_PATH=1
              while ($true) {
                try {
                  $null = (& "$pwsh_cmd" -Command { $PSVersionTable.PSVersion.ToString() })
                  break
                }
                catch {
                  Write-Host -NoNewline "."
                  Start-Sleep -Seconds 1
                }
              }
              Write-Host ""
            }
            $pwsh_version = (& "$pwsh_cmd" -Command { $PSVersionTable.PSVersion.ToString() })
            Write-Output "PowerShell $pwsh_version installed"

       
  - task: PowerShell@2
    inputs:
        targetType: inline
        pwsh: true
        script: |
              $Destination = $(Agent.ToolsDirectory)/FILE
              $StorageAccountName="mystorage15689 " 
              $StorageAccountKey= "AbF/p5UmVVU4CwV6zxuVuO/fsMuWdPwkGdwsSzLv6Pkr+RkAIABKmLMXyO5yr84ftClD9XcH7kBD+AStI3x+zQ=="

              Import-Module Az.Storage
              

              if (-Not (Test-Path -Path $Destination -PathType Container)) {
                New-Item -Path $Destination -ItemType Directory
              }
              $context = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey
            
                if (-Not (Test-Path -Path "$Destination/$file" -PathType Leaf)) {
                  Write-Host -NoNewline "Downloading $file... "
                  Get-AzStorageFileContent -ShareName myfile -Path "$file" -Context $context -Destination $Destination
                  Write-Host "done"
                else {
                  Write-Host "Skipping $file (cached)"
                }
              }

    displayName: Download file

  - task: PowerShell@2
    inputs:
         script: echo "This is the content of the file." > file.txt

    displayName: Environment